// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace PlayGround.Server.Models;

public partial class WebDbContext : DbContext
{
    public WebDbContext(DbContextOptions<WebDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<MediaDirectory> MediaDirectories { get; set; }

    public virtual DbSet<MediaMenu> MediaMenus { get; set; }

    public virtual DbSet<MediaMetaDatum> MediaMetaData { get; set; }

    public virtual DbSet<Rpm> Rpms { get; set; }

    public virtual DbSet<RpmTrack> RpmTracks { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MediaDirectory>(entity =>
        {
            entity.HasKey(e => e.RecordId).HasName("PK_directory");

            entity.ToTable("MediaDirectory");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Directory)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("directory");
            entity.Property(e => e.MenuId).HasColumnName("menuId");

            entity.HasOne(d => d.Menu).WithMany(p => p.MediaDirectories)
                .HasForeignKey(d => d.MenuId)
                .HasConstraintName("FK_MediaDirectory_MediaMenu");
        });

        modelBuilder.Entity<MediaMenu>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("MediaMenu");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Menu)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("menu");
        });

        modelBuilder.Entity<MediaMetaDatum>(entity =>
        {
            entity.HasKey(e => e.RecordId).HasName("PK_metaData");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Caption)
                .HasMaxLength(200)
                .HasColumnName("caption");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.DirectoryId).HasColumnName("directoryId");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");

            entity.HasOne(d => d.Directory).WithMany(p => p.MediaMetaData)
                .HasForeignKey(d => d.DirectoryId)
                .HasConstraintName("FK_MediaMetaData_MediaDirectory");
        });

        modelBuilder.Entity<Rpm>(entity =>
        {
            entity.HasKey(e => e.RecordId).HasName("PK_rpm");

            entity.ToTable("Rpm");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.AudioType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("audioType");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateTime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("type");
        });

        modelBuilder.Entity<RpmTrack>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("RpmTrack");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateTime");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.RpmId).HasColumnName("rpmId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("title");

            entity.HasOne(d => d.Rpm).WithMany(p => p.RpmTracks)
                .HasForeignKey(d => d.RpmId)
                .HasConstraintName("FK_RpmTrack_rpm");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}